  package model;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import model.db.AbstractDatabase;
import model.db.MySQLConnector;

import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class Order {
    private int ordernumber = 0;
    private String shippingState = "";
    private int customerNumber = 0;
    private String orderDate = "";

    private Customer customer = null;

    public Order(int ordernumber, int customerNumber, String shippingState, String orderDate) {
        this.ordernumber = ordernumber;
        this.shippingState = shippingState;
        this.customerNumber = customerNumber;
        this.orderDate = orderDate;
    }

    public static ObservableList<Order> getOrderList() {
        ObservableList<Order> list = FXCollections.observableArrayList();

        AbstractDatabase conn = new MySQLConnector("d027bf1b", "5AHEL2021", "rathgeb.at", 3306, "d027bf1b");

        try {
            PreparedStatement statement = conn.getConnection().prepareStatement("SELECT * FROM orders");

            ResultSet results = statement.executeQuery();

            while (results.next()) {
                Order obj = new Order(results.getInt("orderNumber"), results.getInt("customerNumber"), results.getString("status"), results.getString("orderDate"));
                list.add(obj);
            }

        } catch (Exception throwables) {
            throwables.printStackTrace();
        }

        return list;
    }


    public ObservableList<Position> loadPositions() {
        ObservableList<Position> list = FXCollections.observableArrayList();

        AbstractDatabase conn = new MySQLConnector("d027bf1b", "5AHEL2021", "rathgeb.at", 3306, "d027bf1b");

        try {
            String sql = "SELECT od.*, p.* FROM orderdetails od INNER JOIN products p ON (od.productCode = p.productCode) WHERE od.orderNumber = " + this.ordernumber;

            PreparedStatement statement = conn.getConnection().prepareStatement(sql);

            ResultSet results = statement.executeQuery();

            while (results.next()) {
                Position obj = new Position(results.getString("productCode"), results.getString("productName"), results.getInt("quantityOrdered"), results.getDouble("priceEach"));
                list.add(obj);
            }

        } catch (Exception throwables) {
            throwables.printStackTrace();
        }

        return list;
    }

    @Override
    public String toString() {
        return ordernumber + " - " + shippingState;
    }

    public int getOrdernumber() {
        return ordernumber;
    }

    public String getShippingState() {
        return shippingState;
    }

    public int getCustomerNumber() {
        return customerNumber;
    }

    public String getOrderDate() {
        return orderDate;
    }

    public Customer getCustomer() {
        if (this.customer == null) {
            System.out.println("Lade Kunde von Datenbank");
            AbstractDatabase conn = new MySQLConnector("d027bf1b", "5AHEL2021", "rathgeb.at", 3306, "d027bf1b");

            try {
                String sql = "SELECT * FROM customers WHERE customerNumber = " + this.customerNumber;

                PreparedStatement statement = conn.getConnection().prepareStatement(sql);

                ResultSet results = statement.executeQuery();

                if (results.next()) {
                    customer = new Customer(results.getInt("customerNumber"), results.getString("customerName"), results.getString("contactFirstName"), results.getString("contactLastName"));
                }

            } catch (Exception throwables) {
                throwables.printStackTrace();
            }
        }

        return customer;
    }
}
